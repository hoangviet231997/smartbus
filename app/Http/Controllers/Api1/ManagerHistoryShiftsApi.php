<?php

/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api1;;

use App\Http\Controllers\Controller;
use App\Http\Controllers\Api1\ApiController;
use Illuminate\Http\Request;

use App\Services\HistoryShiftService;
use App\Services\ReportsService;

class ManagerHistoryShiftsApi extends ApiController
{

    /**
     * @var Illuminate\Http\Request
     */
    protected $request;

    /**
     * @var App\Services\HistoryShiftService
     */
    protected $history_shifts; 
    
    /**
     * @var App\Services\ReportsService
     */
    protected $reports;  
    /**
     * Constructor
     */
    public function __construct(Request $request, HistoryShiftService $history_shifts, ReportsService $reports)
    {
        $this->request = $request;
        $this->history_shifts = $history_shifts;
        $this->reports = $reports;
    }

    /**
     * Operation managerCreateHistoryShift
     *
     * create.
     *
     *
     * @return Http response
     */
    public function managerCreateHistoryShift()
    {
        // check login
        $user = $this->requiredAuthUser();
        if (empty($user)) return response('token_invalid', 401);

        $input = $this->request->all();
        $input['user_id'] = $user->id;

        if (count($input['shifts']) <= 0) {
            return response('The given data was invalid.', 404);            
        }

        return $this->history_shifts->created($input['shifts'], $input['user_id']); 
    }
    /**
     * Operation managerListHistoryShifts
     *
     * list.
     *
     *
     * @return Http response
     */
    public function managerListHistoryShifts()
    {
        $user = $this->requiredAuthUser();
        if (empty($user)) return response('token_invalid', 401);

        $input = $this->request->all();

        return $this->history_shifts->getHisttoryShifts($input);
    }
    /**
     * Operation managerDeleteHistoryShift
     *
     * Delete a vehicle.
     *
     * @param int $historyshift_id  (required)
     *
     * @return Http response
     */
    public function managerDeleteHistoryShift($historyshift_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing managerDeleteHistoryShift as a delete method ?');
    }
    /**
     * Operation managerGetHistoryShiftById
     *
     * Find by ID.
     *
     * @param int $historyshift_id  (required)
     *
     * @return Http response
     */
    public function managerGetHistoryShiftById($historyshift_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing managerGetHistoryShiftById as a get method ?');
    }

    /**
     * Operation managerHistoryShiftSearch
     *
     * Find by ID.
     *
     * @param int $historyshift_id  (required)
     *
     * @return Http response
     */
    public function managerHistoryShiftSearch()
    {
        $user = $this->requiredAuthUser();
        if (empty($user)) return response('token_invalid', 401);
        
        
        $input = $this->request->all();
        $input['company_id'] = $user->company_id;

        return $this->history_shifts->managerHistoryShiftSearch($input);
    }

    /**
     * Operation managerHistoryShiftExport
     *
     * Export excel.
     *
     *
     * @return Http response
     */
    public function managerHistoryShiftExport()
    {
        $user = $this->requiredAuthUser();
        if (empty($user)) return response('token_invalid', 401);
        
        
        $input = $this->request->all();
        $input['company_id'] = $user->company_id;

        return $this->reports->managerHistoryShiftExport($input);
    }

}
